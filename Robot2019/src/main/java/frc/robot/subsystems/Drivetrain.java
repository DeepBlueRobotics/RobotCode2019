/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import frc.robot.PIDVelocityOutput;
import frc.robot.commands.TeleopDrive;

public class Drivetrain extends Subsystem {
  private SpeedController leftMotor, rightMotor;
  private Encoder leftEnc, rightEnc;
  public Joystick leftJoy, rightJoy;
  private AHRS gyro;
  private PIDController leftController, rightController;
  private PIDVelocityOutput leftPIDOutput, rightPIDOutput;
  private double kP, kI, kD;
  private double kV, kA, kIntercept;
  public double prevLeftVel, prevRightVel;
  private boolean highgear;

  public Drivetrain(WPI_TalonSRX leftMaster, WPI_VictorSPX leftSlave1, WPI_VictorSPX leftSlave2,
      WPI_TalonSRX rightMaster, WPI_VictorSPX rightSlave1, WPI_VictorSPX rightSlave2, Joystick leftJoy,
      Joystick rightJoy, Encoder leftEnc, Encoder rightEnc, AHRS gyro) {

    leftSlave1.follow(leftMaster);
    leftSlave2.follow(leftMaster);
    this.leftMotor = leftMaster;

    rightSlave1.follow(rightMaster);
    rightSlave2.follow(rightMaster);
    this.rightMotor = rightMaster;

    this.leftJoy = leftJoy;
    this.rightJoy = rightJoy;

    this.leftEnc = leftEnc;
    this.rightEnc = rightEnc;

    this.gyro = gyro;

    // Currently unassigned values
    kP = 0.0;
    kI = 0.0;
    kD = 0.0;
    leftController = new PIDController(kP, kI, kD, leftEnc, leftPIDOutput);
    rightController = new PIDController(kP, kI, kD, rightEnc, rightPIDOutput);

    prevLeftVel = prevRightVel = 0.0;

    // Values to be generated by DrivetrainChartacterization.java.
    kV = 0.4757063634438342;  // Vs / ft
    kA = 0.3028959310593429;  // Vs^2 / ft
    kIntercept = 0.5116430461071434;

    highgear = false;
  }

  @Override
  public void initDefaultCommand() {
    setDefaultCommand(new TeleopDrive(this));
  }

  public void drive(double left, double right) {
    leftMotor.set(left);
    rightMotor.set(right);
  }

  public void stop() {
    leftMotor.stopMotor();
    rightMotor.stopMotor();
  }

  public double getEncDist(String type) {
    if (type.equals("left")) {
      return leftEnc.getDistance();
    } else {
      return rightEnc.getDistance();
    }
  }

  public double getEncRate(String type) {
    if (type.equals("left")) {
      return leftEnc.getRate();
    } else {
      return rightEnc.getRate();
    }
  }

  public void resetGyro() {
    gyro.reset();
  }

  public double getGyroRate() {
    return gyro.getRate();
  }

  public double getGyroAngle() {
    return gyro.getYaw();
  }

  public void enablePID() {
    leftController.enable();
    rightController.enable();
  }

  public void disablePID() {
    leftController.disable();
    rightController.disable();
  }

  public void setPIDTarget(String controller, double target){
    if(controller.equals("left")) {
      leftController.setSetpoint(target);
    } else {
      rightController.setSetpoint(target);
    }
  }

  public double returnPIDOutput(String controller) {
    if(controller.equals("left")) {
      return leftPIDOutput.storedValue;
    } else {
      return rightPIDOutput.storedValue;
    }
  }

  public boolean isOnTarget(String controller) {
    if(controller.equals("left")) {
      return leftController.onTarget();
    } else {
      return rightController.onTarget();
    }
  }

  // Velocity should be in ft/s and acceleration should be in ft/s^2
  public double getExpectedVoltage(double velocity, double acceleration) {
    return kV * velocity + kA * acceleration + kIntercept;
  }

  public void shiftGears() {
		if (highgear) {
      highgear = false;
    } else {
      highgear = true;
    }
	}

  public double getCurrentMaxSpeed() {
		if (highgear) {
			return 204;
		} else {
			return 84;
		}
	}
}
